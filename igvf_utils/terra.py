# -*- coding: utf-8 -*-

###
# Â© 2023 IGVF-DACC
# Jin wook Lee
# leepc12@stanford.edu (or gmail.com)
###

"""
Contains utilities that communicate with Terra's FireCloud Python REST API
"""

from firecloud import api
from pandas import DataFrame
import json
import os


ENV_VAR_WORKSPACE_NAME = "WORKSPACE_NAME"
ENV_VAR_WORKSPACE_NAMESPACE = "WORKSPACE_NAMESPACE"


class TerraError(Exception):
    pass


class TerraErrorTableNotFound(TerraError):
    pass


def get_default_workspace_name():
    return os.environ.get(ENV_VAR_WORKSPACE_NAME)


def get_default_workspace_namespace():
    return os.environ.get(ENV_VAR_WORKSPACE_NAMESPACE)


def is_json_string(s):
    """
    Check if string is wrappred with [] or {}, which means that it's Array/JSON
    string.

    This function is mainly used to convert Array/JSON string into actual
    Array/JSON object.

    to make igvf_utils compatible with TSV generated from the google sheet
    based submitter.

    See https://github.com/igvf-DACC/igvf-metadata-submitter for details.
    """
    trimmed = s.strip()
    return (
        trimmed.startswith("[") and trimmed.endswith("]") or
        trimmed.startswith("{") and trimmed.endswith("}")
    )


def get_terra_table_json(workspace_namespace, workspace_name, table_name):
    """
    Get Terra workspace's table in a JSON format.
    Such table is called entities and each row in a table is called entity.
    See https://api.firecloud.org/#/Entities/downloadEntitiesTSV for details.

    Terra returns an empty contents with status_code 200.

    Args:
        workspace_namespace: `str`. Terra billing project name.
        workspace_name: `str`. Terra workspace name.
        table_name: `str`. Workspace's table name
                    (called entity_type in their API).

    Returns:
        `dict`: JSON excluding Terra table's primary/unique key
                (marked as "entity:" in their table).

    Raises:
        `HTTPError `: Reraised from Terra's REST API.
        `TerraErrorTableNotFound `: Raise if table does not exist.
    """
    response = api.get_entities(
        workspace_namespace, workspace_name, table_name
    )
    response.raise_for_status()

    org_data = json.loads(response.content.decode())

    if not org_data:
        raise TerraErrorTableNotFound

    result = []
    for entity in org_data:
        # "attributes" has all key:val pairs except for primary key definition
        # so we take this
        json_obj = entity["attributes"]

        for key, val in json_obj.items():
            # convert Terra's own table Array type into JSON object
            if isinstance(val, dict):
                json_obj[key] = val["items"]

            # otherwise, check if it's a Array/JSON string
            # which is imported from a TSV generated by igvf-metadata-submitter
            elif isinstance(val, str) and is_json_string(val):
                # simply parse JSON
                json_obj[key] = json.loads(val)

        result.append(json_obj)

    return result


def get_terra_table_tsv(workspace_namespace, workspace_name, table_name):
    """
    Get Terra workspace's table in TSV string.

    Args:
        workspace_namespace: `str`. Terra billing project name.
        workspace_name: `str`. Terra workspace name.
        table_name: `str`. Workspace's table name
                    (called entity_type in their API).

    Returns:
        `str`: TSV string excluding Terra table's primary/unique key
               (marked as "entity:" in their table).

    Raises:
        `HTTPError `: Reraised from Terra's REST API.
        `TerraErrorTableNotFound `: Raise if table does not exist.
    """
    table_json = get_terra_table_json(
        workspace_namespace, workspace_name, table_name
    )

    # use pandas to convert to TSV
    table = DataFrame.from_dict(table_json)
    return table.to_csv(sep="\t", index=False)
