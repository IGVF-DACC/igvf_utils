name: Draft Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 3.0.4)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease

permissions:
  contents: write
  pull-requests: write

jobs:
  draft-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Update version file
      run: |
        echo "__version__ = '${{ inputs.version }}'" > igvf_utils/version.py
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    
    - name: Test package build
      run: |
        python -m build
        # Verify the built package
        pip install dist/*.whl
        python -c "import igvf_utils; print(f'Version: {igvf_utils.__version__}')"
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Bump version to ${{ inputs.version }}"
        title: "Release v${{ inputs.version }}"
        body: |
          ## Release v${{ inputs.version }}
          
          This PR prepares the release of version ${{ inputs.version }}.
          
          ### Changes
          - Updated version to ${{ inputs.version }}
          
          ### Release Checklist
          - [ ] Review and update CHANGELOG if exists
          - [ ] Verify all tests pass
          - [ ] Update documentation if needed
          - [ ] Merge this PR
          - [ ] Create GitHub release with tag `v${{ inputs.version }}`
          
          The GitHub release will automatically trigger PyPI publication.
        branch: release/v${{ inputs.version }}
        delete-branch: true
